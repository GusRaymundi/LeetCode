typedef struct {
    int difficulty;
    int profit;
} Job;

int compareJobs(const void *a, const void *b) {
    Job *jobA = (Job *)a;
    Job *jobB = (Job *)b;
    return jobA->difficulty - jobB->difficulty;
}

int compareInt(const void *a, const void *b) {
    return *(int *)a - *(int *)b;
}

int maxProfitAssignment(int* difficulty, int difficultySize, int* profit, int profitSize, int* worker, int workerSize) {
    
    int totalProfit = 0;
    int maxProfit = 0;
    int jobIndex = 0;

    Job *jobs = (Job *)malloc(difficultySize * sizeof(Job));
    for (int i = 0; i < difficultySize; ++i) {
        jobs[i].difficulty = difficulty[i];
        jobs[i].profit = profit[i];
    }

    qsort(jobs, difficultySize, sizeof(Job), compareJobs);

    qsort(worker, workerSize, sizeof(int), compareInt);

    for (int i = 0; i < workerSize; ++i) {
        while (jobIndex < difficultySize && worker[i] >= jobs[jobIndex].difficulty) {
            maxProfit = (jobs[jobIndex].profit > maxProfit) ? jobs[jobIndex].profit : maxProfit;
            ++jobIndex;
        }
        totalProfit += maxProfit;
    }

    free(jobs);
    return totalProfit;
}
