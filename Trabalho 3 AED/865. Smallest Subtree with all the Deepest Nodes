/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
int find_height(struct TreeNode * root)
{
    if(root)
    {
        int l_height = find_height(root->left);
        int r_height = find_height(root->right);

        return (l_height >= r_height) ? (l_height + 1) : (r_height + 1);
    }
    return 0;
}

bool findlca(struct TreeNode * root, int tree_height, int cur_level, struct TreeNode ** common_lca)
{
    if(root)
    {
        bool l_val = findlca(root->left, tree_height, cur_level + 1, common_lca);
        bool r_val = findlca(root->right, tree_height, cur_level + 1, common_lca);

        if((cur_level == tree_height))
        {
            *common_lca = root;
            return true;
        }

        if(l_val && r_val)
        {
            *common_lca = root;
        }

        return (l_val || r_val);
    }
    return false;
}

struct TreeNode* subtreeWithAllDeepest(struct TreeNode* root) 
{
    
    int height = find_height(root);    

    struct TreeNode * common_lca = NULL;
    findlca(root, height, 1, &common_lca);
    return common_lca;
}
